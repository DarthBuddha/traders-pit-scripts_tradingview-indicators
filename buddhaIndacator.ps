//@version=5
indicator("Buddha Indicator", shorttitle="", overlay=true, timeframe="", timeframe_gaps=true)

ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :
    type == "EMA" ? ta.ema(source, length) :
    type == "SMMA (RMA)" ? ta.rma(source, length) :
    type == "WMA" ? ta.wma(source, length) :
    type == "VWMA" ? ta.vwma(source, length) :
    na

show_ma1   = input(true   , "MA №1", inline="MA #1")
ma1_type   = input.string("SMA"  , ""     , inline="MA #1", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma1_source = input(close  , ""     , inline="MA #1")
ma1_length = input.int(20     , ""     , inline="MA #1", minval=1)
ma1_color  = input(#ff0000, ""     , inline="MA #1")
ma1 = ma(ma1_source, ma1_length, ma1_type)
plot(show_ma1 ? ma1 : na, color = ma1_color, linewidth=1, title="20MA")

show_ma2   = input(true   , "MA №2", inline="MA #2")
ma2_type   = input.string("SMA"  , ""     , inline="MA #2", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma2_source = input(close  , ""     , inline="MA #2")
ma2_length = input.int(21     , ""     , inline="MA #2", minval=1)
ma2_color  = input(#921414, ""     , inline="MA #2")
ma2 = ma(ma2_source, ma2_length, ma2_type)
plot(show_ma2 ? ma2 : na, color = ma2_color, linewidth=1, title="21MA")

show_ma3   = input(true   , "MA №3", inline="MA #3")
ma3_type   = input.string("SMA"  , ""     , inline="MA #3", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma3_source = input(close  , ""     , inline="MA #3")
ma3_length = input.int(50    , ""     , inline="MA #3", minval=1)
ma3_color  = input(#00ffff, ""     , inline="MA #3")
ma3 = ma(ma3_source, ma3_length, ma3_type)
plot(show_ma3 ? ma3 : na, color = ma3_color, linewidth=1, title="50MA")

show_ma4   = input(true   , "MA №4", inline="MA #4")
ma4_type   = input.string("SMA"  , ""     , inline="MA #4", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma4_source = input(close  , ""     , inline="MA #4")
ma4_length = input.int(55    , ""     , inline="MA #4", minval=1)
ma4_color  = input(#1b265e, ""     , inline="MA #4")
ma4 = ma(ma4_source, ma4_length, ma4_type)
plot(show_ma4 ? ma4 : na, color = ma4_color, linewidth=1, title="55MA")

show_ma5   = input(true   , "MA №5", inline="MA #5")
ma5_type   = input.string("SMA"  , ""     , inline="MA #5", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma5_source = input(close  , ""     , inline="MA #5")
ma5_length = input.int(200    , ""     , inline="MA #5", minval=1)
ma5_color  = input(#ffeb3b, ""     , inline="MA #5")
ma5 = ma(ma5_source, ma5_length, ma5_type)
plot(show_ma5 ? ma5 : na, color = ma5_color, linewidth=1, title="200MA")

show_ma6   = input(true   , "MA №6", inline="MA #6")
ma6_type   = input.string("SMA"  , ""     , inline="MA #6", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma6_source = input(close  , ""     , inline="MA #6")
ma6_length = input.int(233    , ""     , inline="MA #6", minval=1)
ma6_color  = input(#ffa726, ""     , inline="MA #6")
ma6 = ma(ma6_source, ma6_length, ma6_type)
plot(show_ma6 ? ma6 : na, color = ma6_color, linewidth=1, title="233MA")

show_ma7   = input(true   , "MA №7", inline="MA #7")
ma7_type   = input.string("SMA"  , ""     , inline="MA #7", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma7_source = input(close  , ""     , inline="MA #7")
ma7_length = input.int(365    , ""     , inline="MA #7", minval=1)
ma7_color  = input(#d117b5, ""     , inline="MA #7")
ma7 = ma(ma7_source, ma7_length, ma7_type)
plot(show_ma7 ? ma7 : na, color = ma7_color, linewidth=1, title="365MA")

show_ma8= input(true   , "MA №8", inline="MA #8")
ma8_type   = input.string("SMA"  , ""     , inline="MA #8", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma8_source = input(close  , ""     , inline="MA #8")
ma8_length = input.int(377    , ""     , inline="MA #8", minval=1)
ma8_color  = input(#880cad, ""     , inline="MA #8")
ma8 = ma(ma8_source, ma8_length, ma8_type)
plot(show_ma8 ? ma8 : na, color = ma8_color, linewidth=1, title="377MA")


// Ichimoku Cloud

conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
// plot(conversionLine, color=#2962FF, title="Conversion Line")
// plot(baseLine, color=#B71C1C, title="Base Line")
// plot(close, offset = -displacement + 1, color=#43A047, title="Lagging Span")
p1 = plot(leadLine1, linewidth=1, offset = displacement - 1, color=color.rgb(38, 240, 47, 85), title="Span A")
p2 = plot(leadLine2, linewidth=1, offset = displacement - 1, color=color.rgb(255, 0, 0, 85), title="Span B")
fill(p1, p2, color = leadLine1 > leadLine2 ? color.rgb(38, 240, 47, 85) : color.rgb(255, 0, 0, 85))

