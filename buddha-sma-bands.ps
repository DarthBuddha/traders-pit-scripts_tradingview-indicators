// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Darth_Buddha

//@version=5
indicator(title = "Buddha-SMA-Bands", shorttitle = "Buddha-Bands", overlay = true, max_lines_count=6)
//-------------------------------------------------[BUDDHA-SMA-BANDS]-------------------------------------------------//
//
//      This indacator incluides the most commly watched slow moving averages. The standard 20, 50, 200 and 365.
//      I have used the fibonacci numbers which are closest to the standard sma.  These are 21, 55, 233 and 377.
//      We than use both sets of SMA to form bands which represent areas of potential support and resistance.
//      The bands will change color based on which sma is on top. The 20sma over the 21 sma would indacate the
//      market is trending up during the average of the last 21 candles of what ever time period you are looking at.
//      Same is true for the other sma bands 50-55, 200-233 and 365-377 each capturing larger sets of time.
//
//----------------------------------------------<CONSTANT__DECLARATIONS>----------------------------------------------//
color   COLOR_020   = color.rgb(128, 000, 000, 65)
color   COLOR_021   = color.rgb(256, 000, 000, 65)
color   COLOR_050   = color.rgb(000, 000, 128, 65)
color   COLOR_055   = color.rgb(000, 000, 256, 65)
color   COLOR_200   = color.rgb(256, 256, 000, 65)
color   COLOR_233   = color.rgb(256, 128, 000, 65)
color   COLOR_365   = color.rgb(256, 000, 256, 65)
color   COLOR_377   = color.rgb(128, 000, 128, 65)
//
float   SMA_020  = ta.sma(source = close, length = 20)
float   SMA_021  = ta.sma(source = close, length = 21)
float   SMA_050  = ta.sma(source = close, length = 50)
float   SMA_055  = ta.sma(source = close, length = 55)
float   SMA_200  = ta.sma(source = close, length = 200)
float   SMA_233  = ta.sma(source = close, length = 233)
float   SMA_365  = ta.sma(source = close, length = 365)
float   SMA_377  = ta.sma(source = close, length = 377)
//
//
//------------------------------------------------------<INPUTS>------------------------------------------------------//
int lineWidth = input.int(title="Line Width", defval=3, step=1, minval=1, maxval=5)
//
//
//-----------------------------------------------<FUNCTION_DECLARATIONS>----------------------------------------------//
//  @function Draws a line to the right of the sma value.
//  @returns Draws new line
drawSmaLine(SMA_Value, lineColor, lineWidth) =>
    var line SMA_Line = na
    if barstate.islast and barstate.isrealtime
        if not na(SMA_Line)
            line.delete(SMA_Line)
        SMA_Line := line.new(time, SMA_Value, time + 1, SMA_Value, xloc.bar_time, extend.right)
        line.set_color(SMA_Line, lineColor)
        line.set_style(SMA_Line, line.style_solid)
        line.set_width(SMA_Line, lineWidth)
    SMA_Line
//
//
//---------------------------------------------------<CALCULATIONS>---------------------------------------------------//
color   color_020_021_band = na
color   color_050_055_band = na
color   color_200_233_band = na
color   color_365_377_band = na
//---[COLOR-LOGIC]
color_020_021_band := SMA_020 > SMA_021 ? COLOR_020 : COLOR_021
color_050_055_band := SMA_050 > SMA_055 ? COLOR_050 : COLOR_055
color_200_233_band := SMA_200 > SMA_233 ? COLOR_200 : COLOR_233
color_365_377_band := SMA_365 > SMA_377 ? COLOR_365 : COLOR_377
//------------------------------------------------------<VISUAL>------------------------------------------------------//
//---[PLOT-SMA]
plot020sma   = plot(SMA_020,  "20 SMA", COLOR_020, lineWidth, plot.style_line)
plot021sma   = plot(SMA_021,  "21 SMA", COLOR_021, lineWidth, plot.style_line)
plot050sma   = plot(SMA_050,  "50 SMA", COLOR_050, lineWidth, plot.style_line)
plot055sma   = plot(SMA_055,  "55 SMA", COLOR_055, lineWidth, plot.style_line)
plot200sma   = plot(SMA_200, "200 SMA", COLOR_200, lineWidth, plot.style_line)
plot233sma   = plot(SMA_233, "233 SMA", COLOR_233, lineWidth, plot.style_line)
plot365sma   = plot(SMA_365, "365 SMA", COLOR_365, lineWidth, plot.style_line)
plot377sma   = plot(SMA_377, "377 SMA", COLOR_377, lineWidth, plot.style_line)
//---[PLOT-SMA-FILL]
fill(plot020sma, plot021sma, SMA_020, SMA_021, color_020_021_band, color_020_021_band,   "20-21 SMA-Band")
fill(plot050sma, plot055sma, SMA_050, SMA_055, color_050_055_band, color_050_055_band,   "50-55 SMA-Band")
fill(plot200sma, plot233sma, SMA_200, SMA_233, color_200_233_band, color_200_233_band, "200-233 SMA-Band")
fill(plot365sma, plot377sma, SMA_365, SMA_377, color_365_377_band, color_365_377_band, "365-377 SMA-Band")
//---[EXTEND-LINE]
LINE_020 = drawSmaLine(SMA_020, COLOR_020, lineWidth)
LINE_021 = drawSmaLine(SMA_021, COLOR_021, lineWidth)
LINE_050 = drawSmaLine(SMA_050, COLOR_050, lineWidth)
LINE_055 = drawSmaLine(SMA_055, COLOR_055, lineWidth)
LINE_200 = drawSmaLine(SMA_200, COLOR_200, lineWidth)
LINE_233 = drawSmaLine(SMA_233, COLOR_233, lineWidth)
LINE_365 = drawSmaLine(SMA_365, COLOR_365, lineWidth)
LINE_377 = drawSmaLine(SMA_377, COLOR_377, lineWidth)
//---[EXTEND-LINE-FILL]
FILL_020_021 = linefill.new(LINE_020, LINE_021, color = color_020_021_band)
FILL_050_055 = linefill.new(LINE_050, LINE_055, color = color_050_055_band)
FILL_200_233 = linefill.new(LINE_200, LINE_233, color = color_200_233_band)
FILL_365_377 = linefill.new(LINE_365, LINE_377, color = color_365_377_band)
//
//
//-----------------------------------------------------[END-CODE]-----------------------------------------------------//
//
//  Downloading from any other source besides Trading View, for example Github.
//
//  MIT License
//
//  Copyright (c) 2024 Darth Buddha
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
